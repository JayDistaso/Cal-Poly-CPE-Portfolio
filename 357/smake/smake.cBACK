#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <stddef.h>
//#include "SmartAlloc.h"
#include "smake.h"
#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>

//SMAKE

#define INIT_CAPACITY 10
#define DOUBLE 2

int main(int argc, char *argv[]) {

   FILE *fp;
   char * tok;
   char * sparetok;
   char * line = NULL;
   int ruleCapacity = INIT_CAPACITY;
   Rule **rules = calloc(INIT_CAPACITY, sizeof(Rule *));
   size_t len = 0;
   ssize_t read;
   int i = 0;
   int numRules = 0;
   char *str;
   char *oStr;
   char *spareStr;
   char *spareStr2;
   Rule *currRule;
   int index = 0;
   int flag = 0;
   
   if ((fp = fopen("Smakefile", "r")) == NULL) {
      //printf("File failed to open\n");
      exit(-1);
   }
   
   //inital parseing
   //line will be address of buffer, len will be allocated apace
   while ((read = getline(&line, &len, fp)) != -1) {
      str = strdup(line);
      //printf("Looking at string called -%s-\n", str);
      spareStr = strdup(str);
      spareStr2 = strstr(str, ":");
      oStr = strdup(line);
      if (str[0] == '\t') { 
         str[strlen(str) - 1] = '\0'; 
         currRule->actions[currRule->numActions] = strdup(str + 1); 
         if (currRule->numActions > currRule->capacityActions - DOUBLE) {
            currRule->capacityActions *= DOUBLE;
            currRule->actions = realloc(currRule->actions, 
             currRule->capacityActions * sizeof(currRule->actions));
         }
         currRule->numActions++;
      }
      else if (str[0] != '\n')  {
         //printf("in else if\n");
         if (spareStr2 == NULL) {
            //printf("exit1\n");
            exit(-1);
         }
         //printf("spareStr2 = %p\n", spareStr2);
         spareStr2++;
         //printf("spareStr2 = %p\n", spareStr2);
         spareStr2 = strstr(spareStr2, ":");
        // printf("spareStr2 = %p\n", spareStr2);
         if (spareStr2 != NULL) {
            //printf("exit2\n");
            exit(-1);
         }
         
         tok = strtok(str, " \n:");//tok is now name of rule
         if (tok) {
            //printf("in tok while\n");
            sparetok = strdup(tok);
            //if (tok[strlen(tok) - 1] == ':') { 
            //   tok[strlen(tok) - 1] = '\0';
            //}
            rules[numRules] = MakeRule(tok, numRules);
            currRule = rules[numRules++];
            if (numRules > ruleCapacity - DOUBLE) {
               ruleCapacity *= DOUBLE;
                  rules = realloc(rules, ruleCapacity * sizeof(*rules));
               }
               tok = strtok(NULL, " \n:");//tok should now be a depends, could be nill
              // printf("still working\n");
               spareStr2 = strstr(oStr, ":");
               //printf("firstcall is good\n");
               if (tok == NULL) {
                  continue;               
               }
               spareStr2 = strstr(spareStr2, tok);
               
               if (spareStr2 == NULL) {
                  exit(-1);
               }
               //if (tok && tok[0]) {
               //it is not null   
               //}
               //else {
                 // tok = strdup(sparetok);
                 // tok += strlen(tok) - 1;
               //}
               //if (strcmp(tok, ":")) {//eat / check for colon
                //  if (sparetok[strlen(sparetok) - 1] != ':') {
                //     for (i = 0; i < strlen(spareStr2); i++) {
                 //       if (spareStr2[i] == ' ') {
                           
                 //       }
                 //    }
                //     printf("Error missing :\n");
                 //    exit(-1);
                 // }
                  //else {
                    // while (tok) {
                    //    tok = strtok(NULL, " \n");
                   //  }
                  //   tok = strtok(spareStr, " \n");
                 // }
               //}
               //tok = strtok(NULL, " \n");
               while (tok) {
                  if (strcmp(tok, ":") == 0) {
                     exit(-1);
                  }
                  currRule->depends[currRule->numDepends] = strdup(tok);
                  if (currRule->numDepends > currRule->capacityDepends 
                   - DOUBLE) {
                     currRule->capacityDepends *= DOUBLE;
                     currRule->depends = realloc(currRule->depends, 
                      currRule->capacityDepends * sizeof(currRule->depends));
                  }
                  currRule->numDepends++;
                  tok = strtok(NULL, " \n"); 
               }
            }
            else {
               //printf("some error\n");
               exit(-1);
            }                       
         }
         else {
            free(str);
         }       
   }
   rewind(fp); //go back to start of file
   
  //printf("----------------------DONE PARSING-------------------\n\n");
  //Uncomment below loop to view rules
  //for (i = 0; i < numRules; i++) {
      //PrintRule(rules[i]);
  //}
   
   if (argc == DOUBLE) {
      index = FindRule(rules, argv[1], numRules);
      if (index == -1) {
         //printf("The command line rule noes not exsist\n");
         exit(-1);
      }
      currRule = rules[index];
   }
   else if (argc == 1) {
      currRule = rules[0];
   }
   else {
      //printf("too many command line arguments\n");
      exit(-1);
   }
   
   for (i = 0; i < currRule->numDepends; i++) {
      if (ExecuteDepends(rules, numRules, currRule->index, 
       i, 0, currRule->index)) { //returns 1 for updated
         flag = 1;
      } 
   }
   if (flag || currRule->numDepends == 0) {
      for (i = 0; i < rules[currRule->index]->numActions; i++) {
         printf("%s\n", rules[currRule->index]->actions[i]);
         int temp6 = system(rules[currRule->index]->actions[i]);
         if (temp6) {
            exit(-1);
         }      
      }
   }
   
   //close stream, free buffer
   fclose(fp);
   if (line) {
      free(line);
   }
   exit(EXIT_SUCCESS);
    
}

struct Rule *MakeRule(char *tok, int numRules)
{
   struct Rule *r = calloc(1, sizeof(Rule));
   
   r->name = strdup(tok);
   r->index = numRules;
   r->actions = calloc(INIT_CAPACITY, sizeof(char *));
   r->depends = calloc(INIT_CAPACITY, sizeof(char *));
   r->capacityDepends = INIT_CAPACITY;
   r->capacityActions = INIT_CAPACITY;
   r->numDepends = 0;
   r->numActions = 0;
   
   return r;
}

void PrintRule(Rule *r) {
   int i;
   
   printf("Index is %d\n\n", r->index);
   printf("Rule name is %s\n", r->name);
   printf("Rule capacity is %d\n", r->capacityDepends);
   printf("Action Capacity is %d\n", r->capacityActions);
   printf("Number of depends is %d\n", r->numDepends);
   printf("Number of actions is %d\n", r->numActions);
   for (i = 0; i < r->numDepends; i++) {
      printf("Depends[%d] = %s\n", i , r->depends[i]);
   }
   
   printf("\n");
   for (i = 0; i < r->numActions; i++) {
      printf("Actions[%d] = %s\n", i , r->actions[i]);
   }
   
   printf("\n");
}

//this function returns index of rule with same name as name
int FindRule (Rule **rulebook, char *name, int numRules) {

   int i;
   for (i = 0; i < numRules; i++) {
      if (strcmp(rulebook[i]->name, name) == 0)
      {
         return i;
      }
   }
  //Did not find rule so return -1;
   return -1;
}

int ExecuteDepends(Rule **rules, int numRules, int indexRule, 
 int indexDepends, int updated, int rootIndex) { 
   Rule *currRule = rules[indexRule];
   int i = 0;
   time_t targetTime;
   int executeMe = 0;   
   int temp = 0;
   int oUpdated = updated;
   int temp6;
   struct stat bufT; 
   int validDepends = 0;
   struct stat buf;

   
   if (currRule->numDepends == 0) {
      if (rootIndex != indexRule) {
         for (i = 0; i < rules[indexRule]->numActions; i++) {
            printf("%s\n", rules[indexRule]->actions[i]);
            temp6 = system(rules[indexRule]->actions[i]);
            if (temp6) {
               exit(-1);
            }     
         }
      }
     return updated + 1;
   }
   
   if (stat(currRule->name, &bufT))
   {
      if (rootIndex != indexRule) {
         executeMe = 1;
      } 
      updated++;
   }
   targetTime = bufT.st_mtime;   
   
   temp = FindRule(rules, currRule->depends[indexDepends], numRules);
   
   if (temp != -1) {
      validDepends = 1;
      updated += ExecuteDepends(rules, numRules, temp, 0, updated, 
       rootIndex);
      for (i = 1; i < rules[temp]->numDepends; i++) {
         updated += ExecuteDepends(rules, numRules, temp, i, updated,
          rootIndex);
       }
         if (oUpdated != updated) {
            executeMe = 1; 
         } 
   }
   
   if (FileExist(currRule->depends[indexDepends])) { 
      validDepends = 1;
      if (stat(currRule->depends[indexDepends], &buf))
      {
         //printf("Error stating file\n");
         exit(-1);
      }
      if (difftime(buf.st_mtime, targetTime) > 0) {
         updated++;
         executeMe = 1;
      } 
   }
   
   if (validDepends != 1) {
      //printf("The depency is not valid\n");
      exit(-1);
   }
  // printf("executeMe is set to %d\n", executeMe);
   if (executeMe && indexRule != rootIndex) {
      for (i = indexDepends + 1; i < rules[indexRule]->numDepends; i++) {
         ExecuteDepends(rules, numRules, indexRule, 
          i, updated, rootIndex);
      } 
      for (i = 0; i < rules[indexRule]->numActions; i++) {
         printf("%s\n", rules[indexRule]->actions[i]);
         temp6 = system(rules[indexRule]->actions[i]);
         if (temp6) {
            exit(-1);
         }      
      }
   }
   return updated; 
}
//Function for checking file Exist adapted from 
//http://stackoverflow.com/questions/230062/
//whats-the-best-way-to-check-if-a-file-exists-in-c-cross-platform
int FileExist (char *filename)
{
   struct stat buffer;   
   return (stat(filename, &buffer) == 0);
}
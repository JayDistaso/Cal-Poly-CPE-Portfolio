
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "lwp.h"

#define MAXSNAKES  100
#define INITIALSTACK 2048

typedef void (*sigfun)(int signum);
static void indentnum(uintptr_t num);

/*This is the context starting the lwp system*/
static context originalContext;

/*Safe stack so we can free stack we are on*/
static unsigned long *safeStack;

/*tid of process running, 0 is orignContext*/
static tid_t tidRunning = 0;

/*This is the rootThread used by library for keeping track of procs*/
static thread rootThread;


/*Used by schedueler to keep track of scheds*/
static thread rootOfSched = NULL;

/*How many running procs we have*/
static unsigned long numberOfProcs = 0;

thread rrr_next() {
   thread temp = tid2thread(tidRunning);
   if (!temp) {
      if (rootThread) {
         return rootThread;
      }
      return NO_THREAD;
   }
   if (temp->sched_one) {
      return temp->sched_one;
   }
   else {
      return rootThread;
   }
}

/*Adds thread to rr sched*/
void rrr_admit(thread new) {
   if (!rootOfSched) {
      rootOfSched = new;
   }
   else {
      new->sched_two = rootOfSched;
      rootOfSched->sched_one = new;
      rootOfSched = new;
   }
}

/*removes thread from rr sched*/
void rrr_remove(thread victim) {
   thread temp = victim->sched_two;
   if (temp) {
      temp->sched_one = victim->sched_one;
   }
   temp = victim->sched_one;
   if (temp) {
      temp->sched_two = victim->sched_two;
   }
   if (victim == rootOfSched) {
      rootOfSched = victim->sched_two;
   }
   if (victim == rootThread) {
      rootThread = rootThread->lib_one;
   }
}

static struct scheduler RoundRobin = {NULL, NULL, rrr_admit,  rrr_remove, rrr_next};
/*The lwp system current scedueler*/ 
static scheduler currentScheduler = &RoundRobin;

int main(int argc, char *argv[]){
  long i;

  for (i=1;i<argc;i++) {                /* check options */
    fprintf(stderr,"%s: unknown option\n",argv[i]);
    exit(-1);
  }

  printf("Launching LWPS\n");

  /* spawn a number of individual LWPs */
  for(i=1;i<=5;i++) {
    lwp_create((lwpfun)indentnum,(void*)i,INITIALSTACK);
  }

  lwp_start();                     /* returns when the last lwp exits */

  printf("Back from LWPS.\n");
  for(i=1;i<=5;i++) {
    lwp_create((lwpfun)indentnum,(void*)i,INITIALSTACK);
  }
    lwp_set_scheduler(currentScheduler);
    lwp_start();
    printf("Back agaun from LWPS.\n"); 

  return 0;
}

static void indentnum(uintptr_t num) {
  /* print the number num num times, indented by 5*num spaces
   * Not terribly interesting, but it is instructive.
   */
  int howfar,i;

  howfar=(int)num;              /* interpret num as an integer */
  for(i=0;i<howfar;i++){
    printf("%*d\n",howfar*5,howfar);
    lwp_yield();                /* let another have a turn */
  }
                   /* bail when done.  This should
                                 * be unnecessary if the stack has
                                 * been properly prepared
                                 */
}


